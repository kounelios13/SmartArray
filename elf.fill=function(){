[1mdiff --git a/smartArray.js b/smartArray.js[m
[1mindex 11b0fae..139e74a 100644[m
[1m--- a/smartArray.js[m
[1m+++ b/smartArray.js[m
[36m@@ -28,7 +28,6 @@[m [mfunction SmartArray(arr,byVal){[m
 		self.length=_array.length;[m
 	}[m
 	var self=this;[m
[31m-	[m
 	var _array=arr||[],[m
 	_backup=[];[m
 	if(_array.constructor!=Array)[m
[36m@@ -115,9 +114,8 @@[m [mfunction SmartArray(arr,byVal){[m
 		backup();[m
 	};[m
 	self.restoreBackup=function(){[m
[31m-		var temp=_backup.slice();[m
 		updateLength(_array);[m
[31m-		return self.replaceArray(temp);[m
[32m+[m		[32mreturn self.replaceArray(_backup.slice());[m
 	};[m
 	self.getBackup=function(){[m
 		return _backup;[m
[36m@@ -134,36 +132,50 @@[m [mfunction SmartArray(arr,byVal){[m
 		else [m
 			throw new Error("Array is empty");[m
 	};[m
[31m-	self.fill=function(){[m
[31m-		var args = Array.prototype.slice.call(arguments);[m
[31m-    	return Array.prototype.fill.apply(_array, args);[m
[31m-	};[m
 	self.pickRandomItem=function(){[m
 		//Shuffe a copy of the array(not the original array) and return the first element[m
 		return shuffle(_array.slice())[0];[m
 	};[m
 	self.swap=function(start_index,end_index){[m
[31m-		//Swap to items [m
[31m-		//Note that swapping 2 numbers will not work since Javascript passes numbers by value not by reference[m
[31m-		//TODO[m
[31m-		//Check if indexes are between the array limits[m
 		backup();[m
 		var array_max=self.length;[m
[31m-		if(start_index == array_max || end_index ==array_max)[m
[31m-			throw new TypeError("Index out of bounds"); [m
[32m+[m		[32mif(start_index == array_max || end_index ==array_max || start_index < 0 || end_index < 0)[m
[32m+[m			[32mthrow new TypeError("Index out of bounds");[m
[32m+[m		[32mif(!start_index || !end_index){[m
[32m+[m				[32mvar msg;[m
[32m+[m				[32mif(start_index == 0 || end_index == 0)//Javascript treats 0 as false so when 0 is passed as an argument in[m[41m [m
[32m+[m					[32m//self.swap an error will be thrown so to avoid it if any of the arguments is 0 we do not throw any errors[m
[32m+[m					[32mmsg=null;[m
[32m+[m				[32melse if(!start_index && !end_index )[m[41m [m
[32m+[m					[32mmsg="Both indexes are invalid";[m
[32m+[m				[32melse if(!start_index)[m
[32m+[m					[32mmsg="Start index is invalid";[m
[32m+[m				[32melse[m
[32m+[m					[32mmsg="End index is invalid";[m
[32m+[m				[32m//If there is an actual error throw the error[m
[32m+[m				[32mif(msg)[m
[32m+[m					[32mthrow new TypeError(msg);[m
[32m+[m		[32m}[m
 		var temp=_array[end_index];[m
 		_array[end_index]=_array[start_index];[m
 		_array[start_index]=temp;[m
 	};[m
[32m+[m	[32mself.replaceItem=function(item_index,newObj){[m
[32m+[m		[32mbackup();[m
[32m+[m		[32m_array[item_index]=newObj;[m
[32m+[m		[32mreturn _array;[m
[32m+[m	[32m};[m
 	//Reimplementing Basic Array methods[m
 	self.push=function(){[m
[31m-		var args = Array.prototype.slice.call(arguments);[m
[31m-		self.length = Array.prototype.push.apply(_array,args);[m
[32m+[m		[32mreturn self.length = Array.prototype.push.apply(_array,getArgs(arguments));[m
 	};[m
 	self.pop=function(){[m
 		self.length--;[m
 		return _array.pop();[m
 	};[m
[32m+[m	[32mself.fill=function(){[m
[32m+[m[41m    [m	[32mreturn Array.prototype.fill.apply(_array,getArgs(arguments));[m
[32m+[m	[32m};[m
 	self.slice=function(start,stop){[m
 		return Array.prototype.slice.apply(_array,getArgs(arguments));[m
 	};[m
[36m@@ -184,7 +196,8 @@[m [mfunction SmartArray(arr,byVal){[m
 		return _array.reduce(filter);[m
 	};[m
 	self.sort=function(compareFunction){[m
[31m-		return compareFunction=='>'?_array.sort(function(a,b){return b-a}):_array.sort(compareFunction);[m
[32m+[m		[32mvar fn=compareFunction=='>'?function(a,b){return b-a;}:compareFunction=='<'?function(a,b){return a -b ;}:compareFunction;[m
[32m+[m		[32mreturn _array.sort(fn);[m
 	}[m
 	self.join=function(seperator){[m
 		return _array.join(seperator);[m
